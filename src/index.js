import { getLocalQuote, isSameDay } from "./utils/index.js";

import TelegramBot from "node-telegram-bot-api";
import axios from "axios";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import { mainMenu, WELCOME_MESSAGE } from "./constants/menu.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const TOKEN = "8327969194:AAHoPBBxnHqbNeQvl7vUg5SY2xh5lErnXm0";

const bot = new TelegramBot(TOKEN, { polling: true });

let userLastRequest = {};

bot.onText(/\/start|\/help/, (msg) => {
  const chatId = msg.chat.id;
  if (!userLastRequest[chatId]) {
    userLastRequest[chatId] = null;
  }
  setMainMenu(chatId);
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É") {
    const now = new Date();
    const lastRequestDate = userLastRequest[chatId];

    if (lastRequestDate && isSameDay(now, lastRequestDate)) {
      bot.sendMessage(
        chatId,
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é! üåÖ"
      );
    } else {
      userLastRequest[chatId] = now;
      const waitingMessage = await bot.sendMessage(
        chatId,
        "–ò—â–µ–º –¥–ª—è –≤–∞—Å –º—É–¥—Ä—É—é —Ü–∏—Ç–∞—Ç—É... ‚ú®"
      );
      const quote = await getRandomQuote();
      await bot.deleteMessage(chatId, waitingMessage.message_id);
      bot.sendMessage(chatId, quote.text);
    }
  } else if (text === "–ñ–µ–Ω—Å–∫–∏–π –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±") {
    handleWomensClub(chatId);
  } else if (text === "–û–±–æ –º–Ω–µ") {
    handleAboutMe(chatId);
  }
});

// –ñ–µ–Ω—Å–∫–∏–π –∫–ª—É–±
async function handleWomensClub(chatId) {
  try {
    const photosDir = path.join(__dirname, "assets", "images", "womens");
    const files = fs.readdirSync(photosDir);
    const imageFiles = files
      .filter((file) => /\.(jpg|jpeg|png|gif)$/i.test(file))
      .slice(0, 5);

    if (imageFiles.length === 0) {
      await bot.sendMessage(chatId, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
      return;
    }
    const mediaGroup = imageFiles.map((file, index) => ({
      type: "photo",
      media: path.join(photosDir, file),
      caption:
        index === 0
          ? `–ñ–µ–Ω—Å–∫–∏–π –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± üìö

  <strong>–≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –¥–ª—è –∂–µ–Ω—â–∏–Ω –∏ –ø—Ä–æ –∂–µ–Ω—â–∏–Ω, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ üïäÔ∏è</strong>

  –ú–µ—Å—Ç–æ, –≥–¥–µ —á–µ—Ä–µ–∑ –∫–Ω–∏–≥–∏, —Ñ–∏–ª—å–º—ã, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –∏ –¥—É—à–µ–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, –∏—Å—Ç–æ—Ä–∏–∏ –º—ã –±—É–¥–µ–º:

    ‚Ä¢ –†–∞–∑–±–∏—Ä–∞—Ç—å —Ç–æ, –æ —á–µ–º –æ–±—ã—á–Ω–æ –º–æ–ª—á–∞—Ç.
    ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.
    ‚Ä¢ –£—á–∏—Ç—å—Å—è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö.
    ‚Ä¢ –í–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å.

  <em>–ë–µ–∑ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤. –ë–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è. –ß–µ—Å—Ç–Ω–æ –∫ —Å–µ–±–µ.</em>`
          : undefined,
      parse_mode: "HTML",
    }));

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∂–µ–Ω—Å–∫–æ–º—É –∫–ª—É–±—É?", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üìñ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±",
              url: "https://t.me/viktoria_albu",
            },
          ],
        ],
        resize_keyboard: true,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:", error);
    await bot.sendMessage(chatId, "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±–æ –º–Ω–µ
async function handleAboutMe(chatId) {
  try {
    const photosDir = path.join(
      __dirname,
      "assets",
      "images",
      "self",
      "IMG_2148.jpg"
    );

    const caption =
      "–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∂–µ–Ω—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º —Ä–æ—Å—Ç–µ. –†–∞–¥–∞ –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞ –ø—É—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏!";

    await bot.sendPhoto(chatId, photosDir, {
      caption: caption,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üí´ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º",
              url: "https://t.me/viktoria_albu",
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ '–û–±–æ –º–Ω–µ':", error);
    await bot.sendMessage(chatId, "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç

async function getRandomQuote() {
  try {
    const response = await axios.get("https://api.forismatic.com/api/1.0/", {
      params: {
        method: "getQuote",
        lang: "ru",
        format: "json",
      },
    });

    const quoteData = response.data;
    const author = quoteData.quoteAuthor || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä";
    const fullQuoteText = `${quoteData.quoteText} ‚Äî ¬© ${author}`;

    return {
      text: fullQuoteText,
      content: quoteData.quoteText,
    };
  } catch {
    console.error();
    return getLocalQuote();
  }
}

//Menu

function setMainMenu(chatId) {
  bot.sendMessage(chatId, WELCOME_MESSAGE, mainMenu);
}

//Errors
bot.on("polling_error", (error) => {
  console.error("Polling error:", error.code, error.message);
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...");
