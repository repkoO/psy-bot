const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

const TOKEN = "8327969194:AAHoPBBxnHqbNeQvl7vUg5SY2xh5lErnXm0";

const bot = new TelegramBot(TOKEN, { polling: true });

let userLastRequest = {};

function setMainMenu(chatId) {
  const menuOptions = {
    reply_markup: {
      keyboard: [[{ text: "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" }]],
    },
    resize_keyboard: true,
    one_time_keyboard: false,
  };
  bot.sendMessage(
    chatId,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.",
    menuOptions
  );
}

bot.onText(/\/start|\/help/, (msg) => {
  const chatId = msg.chat.id;
  if (!userLastRequest[chatId]) {
    userLastRequest[chatId] = null;
  }
  setMainMenu(chatId);
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É") {
    const now = new Date();
    const lastRequestDate = userLastRequest[chatId];

    if (lastRequestDate && isSameDay(now, lastRequestDate)) {
      bot.sendMessage(
        chatId,
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é! üåÖ"
      );
    } else {
      userLastRequest[chatId] = now;
      const waitingMessage = await bot.sendMessage(
        chatId,
        "–ò—â–µ–º –¥–ª—è –≤–∞—Å –º—É–¥—Ä—É—é —Ü–∏—Ç–∞—Ç—É... ‚ú®"
      );
      const quote = await getRandomQuote();
      await bot.deleteMessage(chatId, waitingMessage.message_id);
      bot.sendMessage(chatId, quote.text);
      console.log("–¶–∏—Ç–∞—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", quote.content);
    }
  }
});

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
function isSameDay(date1, date2) {
  return (
    date1.getFullYear() === date2.getFullYear() &&
    date1.getMonth() === date2.getMonth() &&
    date1.getDate() === date2.getDate()
  );
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç

async function getRandomQuote() {
  try {
    const response = await axios.get("https://api.forismatic.com/api/1.0/", {
      params: {
        method: "getQuote",
        lang: "ru",
        format: "json",
      },
    });

    const quoteData = response.data;
    const author = quoteData.quoteAuthor || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä";
    const fullQuoteText = `${quoteData.quoteText} ‚Äî ¬© ${author}`;

    return {
      text: fullQuoteText,
      content: quoteData.quoteText,
    };
  } catch {
    console.error();
    return getLocalQuote();
  }
}

function getLocalQuote() {
  const localQuotes = [
    {
      text: "–í—Å—ë –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ —É–º–µ–µ—Ç –∂–¥–∞—Ç—å. ‚Äî ¬© –û–Ω–æ—Ä–µ –¥–µ –ë–∞–ª—å–∑–∞–∫",
      content: "–≤—Å—ë –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è –¥–ª—è —Ç–æ–≥–æ –∫—Ç–æ —É–º–µ–µ—Ç –∂–¥–∞—Ç—å",
    },
    {
      text: "–ú—ã—Å–ª—å ‚Äî –Ω–∞—á–∞–ª–æ –≤—Å–µ–≥–æ. –ò –º—ã—Å–ª—è–º–∏ –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å. –ò –ø–æ—Ç–æ–º—É –≥–ª–∞–≤–Ω–æ–µ –¥–µ–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è: —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –º—ã—Å–ª—è–º–∏. ‚Äî ¬© –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
      content: "–º—ã—Å–ª—å –Ω–∞—á–∞–ª–æ –≤—Å–µ–≥–æ –∏ –º—ã—Å–ª—è–º–∏ –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å",
    },
    {
      text: "–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ, –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é. ‚Äî ¬© –°—Ç–∏–≤ –î–∂–æ–±—Å",
      content: "–≤–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é",
    },
    {
      text: "–°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. ‚Äî ¬© –§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
      content: "—Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Ç–æ—Ç –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π",
    },
    {
      text: "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ —É–π—Ç–∏ –∏–∑ —Ç–æ–ª–ø—ã. –°–ª–µ–¥—É–π –∑–∞ —Å–≤–æ–µ–π –º–µ—á—Ç–æ–π, –¥–≤–∏–≥–∞–π—Å—è –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏. ‚Äî ¬© –ë–µ—Ä–Ω–∞—Ä–¥ –®–æ—É",
      content: "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ —É–π—Ç–∏ –∏–∑ —Ç–æ–ª–ø—ã —Å–ª–µ–¥—É–π –∑–∞ —Å–≤–æ–µ–π –º–µ—á—Ç–æ–π",
    },
  ];

  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const randomIndex = Math.floor(Math.random() * localQuotes.length);
  return localQuotes[randomIndex];
}

//Errors
bot.on("polling_error", (error) => {
  console.error("Polling error:", error.code, error.message);
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...");
