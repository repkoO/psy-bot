import { getLocalQuote, getRandomQuote, isSameDay } from "./utils/index.js";
import * as dotenv from "dotenv";
import TelegramBot from "node-telegram-bot-api";
import axios from "axios";
import FormData from "form-data";

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;
const FBAPI = process.env.FB_API_KEY;
const FBSECRET = process.env.FB_SECRET_KEY;

const requiredEnvVars = ["BOT_TOKEN", "FB_API_KEY", "FB_SECRET_KEY"];
const missingVars = requiredEnvVars.filter((varName) => !process.env[varName]);

if (missingVars.length > 0) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", missingVars.join(", "));
  process.exit(1);
}

console.log("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

const FUSIONBRAIN_URL = "https://api-key.fusionbrain.ai/";
const AUTH_HEADERS = {
  "X-Key": `Key ${FBAPI}`,
  "X-Secret": `Secret ${FBSECRET}`,
};

// –ü–æ–ª—É—á–∞–µ–º pipeline_id (–∞–Ω–∞–ª–æ–≥ get_pipeline –∏–∑ Python)
async function getPipelineId() {
  try {
    const response = await axios.get(FUSIONBRAIN_URL + "key/api/v1/pipelines", {
      headers: AUTH_HEADERS,
    });

    console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω—ã:", response.data);

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
    if (response.data && response.data.length > 0) {
      const pipelineId = response.data[0].id;
      console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline ID:", pipelineId);
      return pipelineId;
    }

    return null;
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ pipeline ID:",
      error.response?.data || error.message
    );
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ generate –∏–∑ Python)
async function generateImage(prompt, pipelineId) {
  try {
    const enhancedPrompt = `PSYCHOLOGICAL CONCEPT: "${prompt}"

CREATE a detailed metaphorical visual representation WITHOUT ANY TEXT.

STRICT REQUIREMENTS:
- ABSOLUTELY NO TEXT, WORDS, LETTERS, OR WRITING OF ANY KIND
- NO inscriptions, labels, watermarks, signatures, or logos
- NO text-like patterns or arrangements that could be mistaken for writing

VISUAL METAPHORS ONLY:
- Use natural elements: trees, water, light, landscapes
- Abstract shapes and patterns that convey emotion
- Color psychology and lighting to express meaning
- Composition and perspective to tell the story

BANNED: text, words, letters, numbers, writing, inscription, label, typography, font, alphabet, character, symbol, written, printed, watermark, signature, logo, brand, caption, subtitle, title, heading, paragraph, sentence, phrase, word art, calligraphy, handwriting, type, print, lettering, scribbles, marks, signs
`;

    const params = {
      type: "GENERATE",
      numImages: 1,
      width: 648,
      height: 648,
      generateParams: {
        query: enhancedPrompt,
      },
    };

    const formData = new FormData();
    formData.append("pipeline_id", pipelineId);
    formData.append("params", JSON.stringify(params), {
      contentType: "application/json",
    });

    const response = await axios.post(
      FUSIONBRAIN_URL + "key/api/v1/pipeline/run",
      formData,
      {
        headers: {
          ...AUTH_HEADERS,
          ...formData.getHeaders(),
        },
        timeout: 30000,
      }
    );

    console.log("–û—Ç–≤–µ—Ç –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", response.data);

    if (response.data.uuid) {
      return response.data.uuid;
    } else {
      throw new Error("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ UUID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
    }
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
      error.response?.data || error.message
    );
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ check_generation –∏–∑ Python)
async function checkGenerationStatus(requestId, attempts = 20, delay = 3000) {
  try {
    while (attempts > 0) {
      await new Promise((resolve) => setTimeout(resolve, delay));

      const response = await axios.get(
        FUSIONBRAIN_URL + "key/api/v1/pipeline/status/" + requestId,
        {
          headers: AUTH_HEADERS,
          timeout: 10000,
        }
      );

      console.log("–°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", response.data.status);

      if (response.data.status === "DONE") {
        // –í–û–¢ –û–ù–û! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ result.files –∫–∞–∫ –≤ Python –ø—Ä–∏–º–µ—Ä–µ
        if (
          response.data.result &&
          response.data.result.files &&
          response.data.result.files.length > 0
        ) {
          return response.data.result.files[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏–ª–∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        } else {
          console.log("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ result:", response.data.result);
          return null;
        }
      } else if (response.data.status === "FAILED") {
        console.log("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:", response.data);
        return null;
      }

      attempts--;
    }

    console.log("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
    return null;
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:",
      error.response?.data || error.message
    );
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function generateImageWithFusionBrain(prompt) {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º pipeline ID
    const pipelineId = await getPipelineId();
    if (!pipelineId) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline ID");
    }

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const generationId = await generateImage(prompt, pipelineId);
    if (!generationId) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é");
    }

    console.log("–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å ID:", generationId);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageFile = await checkGenerationStatus(generationId);
    return imageFile;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ generateImageWithFusionBrain:", error.message);
    return null;
  }
}

const bot = new TelegramBot(TOKEN, { polling: true });
let userLastRequest = {};

// Menu
function setMainMenu(chatId) {
  const menuOptions = {
    reply_markup: {
      keyboard: [[{ text: "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" }]],
    },
    resize_keyboard: true,
  };
  bot.sendMessage(
    chatId,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.",
    menuOptions
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.onText(/\/start|\/help/, (msg) => {
  const chatId = msg.chat.id;
  if (!userLastRequest[chatId]) {
    userLastRequest[chatId] = null;
  }
  setMainMenu(chatId);
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É") {
    const now = new Date();
    const lastRequestDate = userLastRequest[chatId];

    if (lastRequestDate && isSameDay(now, lastRequestDate)) {
      bot.sendMessage(
        chatId,
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞! üåÖ"
      );
      return;
    }

    userLastRequest[chatId] = now;

    try {
      const waitingMessage = await bot.sendMessage(
        chatId,
        "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥."
      );

      const quote = await getRandomQuote();
      const imageFile = await generateImageWithFusionBrain(quote.content);

      await bot.deleteMessage(chatId, waitingMessage.message_id);

      if (imageFile) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (URL –∏–ª–∏ base64)
        if (imageFile.startsWith("http")) {
          // –ï—Å–ª–∏ —ç—Ç–æ URL - —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const imageResponse = await axios.get(imageFile, {
            responseType: "arraybuffer",
          });
          await bot.sendPhoto(chatId, Buffer.from(imageResponse.data), {
            caption: `${quote.text}\n\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é FusionBrain`,
          });
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ base64
          const imageBuffer = Buffer.from(imageFile, "base64");
          await bot.sendPhoto(chatId, imageBuffer, {
            caption: `${quote.text}\n\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é FusionBrain`,
          });
        }

        console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      } else {
        await bot.sendMessage(
          chatId,
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. üòî\n\n${quote.text}`
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});

bot.on("error", (error) => {
  console.error("–û—à–∏–±–∫–∞ Telegram Bot API:", error);
});

console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
